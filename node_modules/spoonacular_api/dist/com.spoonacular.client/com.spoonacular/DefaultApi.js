"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
spoonacular API
he spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

he version of the OpenAPI document: 1.0
ontact: david@spoonacular.com

his class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
o not edit the class manually.



var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _InlineObject = require("../com.spoonacular.client.model/InlineObject8");

var _InlineObject2 = _interopRequireDefault(_InlineObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Default service.
* @module com.spoonacular.client/com.spoonacular/DefaultApi
* @version 1.0
*/
var DefaultApi = function () {

  /**
  * Constructs a new DefaultApi. 
  * @alias module:com.spoonacular.client/com.spoonacular/DefaultApi
  * @class
  * @param {module:com.spoonacular.client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:com.spoonacular.client/ApiClient#instance} if unspecified.
  */
  function DefaultApi(apiClient) {
    _classCallCheck(this, DefaultApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * Callback function to receive the result of the analyzeARecipeSearchQuery operation.
   * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeARecipeSearchQueryCallback
   * @param {String} error Error message, if any.
   * @param {Object} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Analyze a Recipe Search Query
   * Parse a recipe search query to find out its intention.
   * @param {String} q The recipe search query.
   * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeARecipeSearchQueryCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object}
   */


  _createClass(DefaultApi, [{
    key: "analyzeARecipeSearchQuery",
    value: function analyzeARecipeSearchQuery(q, callback) {
      var postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling analyzeARecipeSearchQuery");
      }

      var pathParams = {};
      var queryParams = {
        'q': q
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/queries/analyze', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the analyzeRecipeInstructions operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeRecipeInstructionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze Recipe Instructions
     * Extract ingredients and equipment from the recipe instruction steps.
     * @param {String} instructions The instructions text.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~analyzeRecipeInstructionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "analyzeRecipeInstructions",
    value: function analyzeRecipeInstructions(instructions, callback) {
      var postBody = null;
      // verify the required parameter 'instructions' is set
      if (instructions === undefined || instructions === null) {
        throw new Error("Missing the required parameter 'instructions' when calling analyzeRecipeInstructions");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'instructions': instructions
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/analyzeInstructions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the autocompleteIngredientSearch operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteIngredientSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autocomplete Ingredient Search
     * Autocomplete a search for an ingredient.
     * @param {String} query The query - a partial or full ingredient name.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number The number of results to return (between 1 and 100).
     * @param {Boolean} opts.metaInformation Whether to return more meta information about the ingredients.
     * @param {Boolean} opts.intolerances A comma-separated list of intolerances. All found ingredients must not cause problems for people with one of the given tolerances. See a full list of supported intolerances.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteIngredientSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "autocompleteIngredientSearch",
    value: function autocompleteIngredientSearch(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling autocompleteIngredientSearch");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'number': opts['_number'],
        'metaInformation': opts['metaInformation'],
        'intolerances': opts['intolerances']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/ingredients/autocomplete', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the autocompleteMenuItemSearch operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteMenuItemSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autocomplete Menu Item Search
     * Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
     * @param {String} query The (partial) search query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number The number of results to return (between 1 and 25).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteMenuItemSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "autocompleteMenuItemSearch",
    value: function autocompleteMenuItemSearch(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling autocompleteMenuItemSearch");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/menuItems/suggest', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the autocompleteProductSearch operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteProductSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autocomplete Product Search
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param {String} query The (partial) search query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number The number of results to return (between 1 and 25).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteProductSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "autocompleteProductSearch",
    value: function autocompleteProductSearch(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling autocompleteProductSearch");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/products/suggest', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the autocompleteRecipeSearch operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteRecipeSearchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to possible recipe names.
     * @param {String} query The query to be autocompleted.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number The number of results to return (between 1 and 25).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~autocompleteRecipeSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "autocompleteRecipeSearch",
    value: function autocompleteRecipeSearch(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling autocompleteRecipeSearch");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/autocomplete', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the classifyCuisine operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyCuisineCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify Cuisine
     * Classify the recipe's cuisine.
     * @param {String} title The title of the recipe.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyCuisineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "classifyCuisine",
    value: function classifyCuisine(title, ingredientList, callback) {
      var postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling classifyCuisine");
      }
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling classifyCuisine");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'title': title,
        'ingredientList': ingredientList
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/cuisine', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the classifyGroceryProduct operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify Grocery Product
     * Given a grocery product title, this endpoint allows you to detect what basic ingredient it is.
     * @param {module:com.spoonacular.client/com.spoonacular.client.model/InlineObject8} inlineObject8 
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale The locale of the returned category, supported is en_US and en_GB.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "classifyGroceryProduct",
    value: function classifyGroceryProduct(inlineObject8, opts, callback) {
      opts = opts || {};
      var postBody = inlineObject8;
      // verify the required parameter 'inlineObject8' is set
      if (inlineObject8 === undefined || inlineObject8 === null) {
        throw new Error("Missing the required parameter 'inlineObject8' when calling classifyGroceryProduct");
      }

      var pathParams = {};
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/products/classify', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the classifyGroceryProductBulk operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductBulkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Classify Grocery Product Bulk
     * Given a set of product jsons, get back classified products.
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.locale The locale of the returned category, supported is en_US and en_GB.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~classifyGroceryProductBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "classifyGroceryProductBulk",
    value: function classifyGroceryProductBulk(body, opts, callback) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling classifyGroceryProductBulk");
      }

      var pathParams = {};
      var queryParams = {
        'locale': opts['locale']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/products/classifyBatch', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the convertAmounts operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~convertAmountsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Amounts
     * Convert amounts like \"2 cups of flour to grams\".
     * @param {String} ingredientName The ingredient which you want to convert.
     * @param {Number} sourceAmount The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
     * @param {String} sourceUnit The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
     * @param {String} targetUnit The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~convertAmountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "convertAmounts",
    value: function convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit, callback) {
      var postBody = null;
      // verify the required parameter 'ingredientName' is set
      if (ingredientName === undefined || ingredientName === null) {
        throw new Error("Missing the required parameter 'ingredientName' when calling convertAmounts");
      }
      // verify the required parameter 'sourceAmount' is set
      if (sourceAmount === undefined || sourceAmount === null) {
        throw new Error("Missing the required parameter 'sourceAmount' when calling convertAmounts");
      }
      // verify the required parameter 'sourceUnit' is set
      if (sourceUnit === undefined || sourceUnit === null) {
        throw new Error("Missing the required parameter 'sourceUnit' when calling convertAmounts");
      }
      // verify the required parameter 'targetUnit' is set
      if (targetUnit === undefined || targetUnit === null) {
        throw new Error("Missing the required parameter 'targetUnit' when calling convertAmounts");
      }

      var pathParams = {};
      var queryParams = {
        'ingredientName': ingredientName,
        'sourceAmount': sourceAmount,
        'sourceUnit': sourceUnit,
        'targetUnit': targetUnit
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/convert', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the createRecipeCard operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~createRecipeCardCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Recipe Card
     * Create Recipe Card.
     * @param {String} title The title of the recipe.
     * @param {File} image The binary image of the recipe as jpg.
     * @param {String} ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param {String} instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
     * @param {Number} readyInMinutes The number of minutes it takes to get the recipe on the table.
     * @param {Number} servings The number of servings that you can make from the ingredients.
     * @param {String} mask The mask to put over the recipe image (\\\"ellipseMask\\\", \\\"diamondMask\\\", \\\"diamondMask\\\", \\\"starMask\\\", \\\"heartMask\\\", \\\"potMask\\\", \\\"fishMask\\\").
     * @param {String} backgroundImage The background image (\\\"none\\\",\\\"background1\\\", or \\\"background2\\\").
     * @param {Object} opts Optional parameters
     * @param {String} opts.author The author of the recipe.
     * @param {String} opts.backgroundColor The background color on the recipe card as a hex-string.
     * @param {String} opts.fontColor The font color on the recipe card as a hex-string.
     * @param {String} opts.source The source of the recipe.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~createRecipeCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "createRecipeCard",
    value: function createRecipeCard(title, image, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling createRecipeCard");
      }
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling createRecipeCard");
      }
      // verify the required parameter 'ingredients' is set
      if (ingredients === undefined || ingredients === null) {
        throw new Error("Missing the required parameter 'ingredients' when calling createRecipeCard");
      }
      // verify the required parameter 'instructions' is set
      if (instructions === undefined || instructions === null) {
        throw new Error("Missing the required parameter 'instructions' when calling createRecipeCard");
      }
      // verify the required parameter 'readyInMinutes' is set
      if (readyInMinutes === undefined || readyInMinutes === null) {
        throw new Error("Missing the required parameter 'readyInMinutes' when calling createRecipeCard");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling createRecipeCard");
      }
      // verify the required parameter 'mask' is set
      if (mask === undefined || mask === null) {
        throw new Error("Missing the required parameter 'mask' when calling createRecipeCard");
      }
      // verify the required parameter 'backgroundImage' is set
      if (backgroundImage === undefined || backgroundImage === null) {
        throw new Error("Missing the required parameter 'backgroundImage' when calling createRecipeCard");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'title': title,
        'image': image,
        'ingredients': ingredients,
        'instructions': instructions,
        'readyInMinutes': readyInMinutes,
        'servings': servings,
        'mask': mask,
        'backgroundImage': backgroundImage,
        'author': opts['author'],
        'backgroundColor': opts['backgroundColor'],
        'fontColor': opts['fontColor'],
        'source': opts['source']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/visualizeRecipe', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the detectFoodInText operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~detectFoodInTextCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect Food in Text
     * Detect ingredients and dishes in texts. This task is also called Named Entity Recognition (NER). In our case the entities are foods. Either dishes, such as pizza and cheeseburger or ingredients, such as cucumber and almonds.
     * @param {String} text The text in which food items such as dish names and ingredients should be detected in.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~detectFoodInTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "detectFoodInText",
    value: function detectFoodInText(text, callback) {
      var postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling detectFoodInText");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'text': text
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/detect', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the extractRecipeFromWebsite operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~extractRecipeFromWebsiteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract Recipe from Website
     * Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and the equipment that is used.
     * @param {String} url The URL of the recipe page.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.forceExtraction If true, the extraction will be triggered no matter whether we know the recipe already. Use that only if information is missing as this operation is slower.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~extractRecipeFromWebsiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "extractRecipeFromWebsite",
    value: function extractRecipeFromWebsite(url, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling extractRecipeFromWebsite");
      }

      var pathParams = {};
      var queryParams = {
        'url': url,
        'forceExtraction': opts['forceExtraction']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/extract', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the generateMealPlan operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~generateMealPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Meal Plan
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param {Object} opts Optional parameters
     * @param {String} opts.timeFrame Either for one \"day\" or an entire \"week\".
     * @param {Number} opts.targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
     * @param {String} opts.diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
     * @param {String} opts.exclude A comma-separated list of allergens or ingredients that must be excluded.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~generateMealPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "generateMealPlan",
    value: function generateMealPlan(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'timeFrame': opts['timeFrame'],
        'targetCalories': opts['targetCalories'],
        'diet': opts['diet'],
        'exclude': opts['exclude']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/mealplans/generate', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getARandomFoodJoke operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getARandomFoodJokeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Random Food Joke
     * Get a random joke that includes or is about food.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getARandomFoodJokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getARandomFoodJoke",
    value: function getARandomFoodJoke(callback) {
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/jokes/random', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getAnalyzedRecipeInstructions operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getAnalyzedRecipeInstructionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and the equipment that is used.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.stepBreakdown Whether to break down the recipe steps even more.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getAnalyzedRecipeInstructionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getAnalyzedRecipeInstructions",
    value: function getAnalyzedRecipeInstructions(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAnalyzedRecipeInstructions");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'stepBreakdown': opts['stepBreakdown']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/analyzedInstructions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getComparableProducts operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getComparableProductsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Comparable Products
     * Find comparable products to the given one.
     * @param {Number} upc The UPC of the product for that you want to find comparable products.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getComparableProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getComparableProducts",
    value: function getComparableProducts(upc, callback) {
      var postBody = null;
      // verify the required parameter 'upc' is set
      if (upc === undefined || upc === null) {
        throw new Error("Missing the required parameter 'upc' when calling getComparableProducts");
      }

      var pathParams = {
        'upc': upc
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/products/upc/{upc}/comparable', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getConversationSuggests operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getConversationSuggestsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Conversation Suggests
     * This endpoint returns suggestions for things the user can say or ask the chat bot.
     * @param {String} query A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number The number of suggestions to return (between 1 and 25).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getConversationSuggestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getConversationSuggests",
    value: function getConversationSuggests(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getConversationSuggests");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/converse/suggest', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getDishPairingForWine operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getDishPairingForWineCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Dish Pairing for Wine
     * Get a dish that goes well with a given wine.
     * @param {String} wine The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getDishPairingForWineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getDishPairingForWine",
    value: function getDishPairingForWine(wine, callback) {
      var postBody = null;
      // verify the required parameter 'wine' is set
      if (wine === undefined || wine === null) {
        throw new Error("Missing the required parameter 'wine' when calling getDishPairingForWine");
      }

      var pathParams = {};
      var queryParams = {
        'wine': wine
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/wine/dishes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getFoodInformation operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getFoodInformationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Food Information
     * Get information about a certain food (ingredient).
     * @param {Number} id The id of the food / ingredient.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.amount The amount of that food.
     * @param {String} opts.unit The unit for the given amount.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getFoodInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getFoodInformation",
    value: function getFoodInformation(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFoodInformation");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'amount': opts['amount'],
        'unit': opts['unit']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/ingredients/{id}/information', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getIngredientSubstitutes operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ingredient Substitutes
     * Search for substitutes for a given ingredient.
     * @param {String} ingredientName The name of the ingredient you want to replace.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getIngredientSubstitutes",
    value: function getIngredientSubstitutes(ingredientName, callback) {
      var postBody = null;
      // verify the required parameter 'ingredientName' is set
      if (ingredientName === undefined || ingredientName === null) {
        throw new Error("Missing the required parameter 'ingredientName' when calling getIngredientSubstitutes");
      }

      var pathParams = {};
      var queryParams = {
        'ingredientName': ingredientName
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/ingredients/substitutes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getIngredientSubstitutesByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesByIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ingredient Substitutes by ID
     * Search for substitutes for a given ingredient.
     * @param {Number} id The id of the ingredient you want substitutes for.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getIngredientSubstitutesByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getIngredientSubstitutesByID",
    value: function getIngredientSubstitutesByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIngredientSubstitutesByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/ingredients/{id}/substitutes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getMenuItemInformation operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getMenuItemInformationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Menu Item Information
     * Get information about a certain menu item.
     * @param {Number} id The menu item id.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getMenuItemInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getMenuItemInformation",
    value: function getMenuItemInformation(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMenuItemInformation");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/menuItems/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getProductInformation operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getProductInformationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Information
     * Get information about a packaged food product.
     * @param {Number} id The id of the packaged food product.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getProductInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getProductInformation",
    value: function getProductInformation(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProductInformation");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/products/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRandomFoodTrivia operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomFoodTriviaCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Random Food Trivia
     * Returns random food trivia.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomFoodTriviaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRandomFoodTrivia",
    value: function getRandomFoodTrivia(callback) {
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/trivia/random', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRandomRecipes operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Random Recipes
     * Find random (popular) recipes.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param {String} opts.tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must adhere to.
     * @param {Number} opts._number The number of random recipes to be returned (between 1 and 100).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRandomRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRandomRecipes",
    value: function getRandomRecipes(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'limitLicense': opts['limitLicense'],
        'tags': opts['tags'],
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/random', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeEquipmentByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeEquipmentByIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Equipment by ID
     * Get a recipe's equipment list.
     * @param {Number} id The recipe id.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeEquipmentByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRecipeEquipmentByID",
    value: function getRecipeEquipmentByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeEquipmentByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/equipmentWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeInformation operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Information
     * Get information about a recipe.
     * @param {Number} id The id of the recipe.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRecipeInformation",
    value: function getRecipeInformation(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeInformation");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'includeNutrition': opts['includeNutrition']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/information', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeInformationBulk operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationBulkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. That is equivalent of calling the Get Recipe Information endpoint multiple times but is faster.
     * @param {String} ids A comma-separated list of recipe ids.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeNutrition Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeInformationBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRecipeInformationBulk",
    value: function getRecipeInformationBulk(ids, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getRecipeInformationBulk");
      }

      var pathParams = {};
      var queryParams = {
        'ids': ids,
        'includeNutrition': opts['includeNutrition']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/informationBulk', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeIngredientsByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeIngredientsByIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Ingredients by ID
     * Get a recipe's ingredient list.
     * @param {Number} id The recipe id.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeIngredientsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRecipeIngredientsByID",
    value: function getRecipeIngredientsByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeIngredientsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/ingredientWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipeNutritionByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeNutritionByIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Nutrition by ID
     * Get a recipe's nutrition widget data.
     * @param {Number} id The recipe id.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipeNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRecipeNutritionByID",
    value: function getRecipeNutritionByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipeNutritionByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/nutritionWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getRecipePriceBreakdownByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipePriceBreakdownByIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recipe Price Breakdown by ID
     * Get a recipe's price breakdown data.
     * @param {Number} id The recipe id.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getRecipePriceBreakdownByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getRecipePriceBreakdownByID",
    value: function getRecipePriceBreakdownByID(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecipePriceBreakdownByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/priceBreakdownWidget.json', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getSimilarRecipes operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getSimilarRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param {Number} id The id of the source recipe to which similar recipes should be found.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number The number of random recipes to be returned (between 1 and 100).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getSimilarRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getSimilarRecipes",
    value: function getSimilarRecipes(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSimilarRecipes");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/similar', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWineDescription operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wine Description
     * Get the description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
     * @param {String} wine The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getWineDescription",
    value: function getWineDescription(wine, callback) {
      var postBody = null;
      // verify the required parameter 'wine' is set
      if (wine === undefined || wine === null) {
        throw new Error("Missing the required parameter 'wine' when calling getWineDescription");
      }

      var pathParams = {};
      var queryParams = {
        'wine': wine
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/wine/description', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWinePairing operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getWinePairingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wine Pairing
     * Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
     * @param {String} food The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxPrice The maximum price for the specific wine recommendation in USD.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getWinePairingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getWinePairing",
    value: function getWinePairing(food, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'food' is set
      if (food === undefined || food === null) {
        throw new Error("Missing the required parameter 'food' when calling getWinePairing");
      }

      var pathParams = {};
      var queryParams = {
        'food': food,
        'maxPrice': opts['maxPrice']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/wine/pairing', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWineRecommendation operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wine Recommendation
     * Get a specific wine recommendation (concrete product) for a given wine, e.g. \"merlot\".
     * @param {String} wine The name of the wine to get a specific product recommendation for.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxPrice The maximum price for the specific wine recommendation in USD.
     * @param {Number} opts.minRating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
     * @param {Number} opts._number The number of wine recommendations expected (between 1 and 100).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~getWineRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "getWineRecommendation",
    value: function getWineRecommendation(wine, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'wine' is set
      if (wine === undefined || wine === null) {
        throw new Error("Missing the required parameter 'wine' when calling getWineRecommendation");
      }

      var pathParams = {};
      var queryParams = {
        'wine': wine,
        'maxPrice': opts['maxPrice'],
        'minRating': opts['minRating'],
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/wine/recommendation', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the guessNutritionByDishName operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~guessNutritionByDishNameCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Guess Nutrition by Dish Name
     * Guess the macro nutrients of a dish given its title.
     * @param {String} title The title of the dish.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~guessNutritionByDishNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "guessNutritionByDishName",
    value: function guessNutritionByDishName(title, callback) {
      var postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling guessNutritionByDishName");
      }

      var pathParams = {};
      var queryParams = {
        'title': title
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/guessNutrition', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the mapIngredientsToGroceryProducts operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~mapIngredientsToGroceryProductsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map Ingredients to Grocery Products
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param {Object} body 
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~mapIngredientsToGroceryProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "mapIngredientsToGroceryProducts",
    value: function mapIngredientsToGroceryProducts(body, callback) {
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling mapIngredientsToGroceryProducts");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/ingredients/map', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the parseIngredients operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~parseIngredientsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings that you can make from the ingredients.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeNutrition Whether nutrition data should be added to correctly parsed ingredients.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~parseIngredientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "parseIngredients",
    value: function parseIngredients(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling parseIngredients");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling parseIngredients");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'includeNutrition': opts['includeNutrition']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/parseIngredients', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the quickAnswer operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~quickAnswerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param {String} q The nutrition-related question.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~quickAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "quickAnswer",
    value: function quickAnswer(q, callback) {
      var postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling quickAnswer");
      }

      var pathParams = {};
      var queryParams = {
        'q': q
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/quickAnswer', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchFoodVideos operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchFoodVideosCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Food Videos
     * Find recipe and other food related videos.
     * @param {String} query The search query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.type The type of the recipes. See a full list of supported meal types.
     * @param {String} opts.cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
     * @param {String} opts.diet The diet to which the recipes must be compliant. See a full list of supported diets.
     * @param {String} opts.includeIngredients A comma-separated list of ingredients that should/must be contained in the recipe.
     * @param {String} opts.excludeIngredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
     * @param {Number} opts.minLength Minimum video length in seconds.
     * @param {Number} opts.maxLength Maximum video length in seconds.
     * @param {Number} opts.offset The number of results to skip (between 0 and 900).
     * @param {Number} opts._number The number of results to return (between 1 and 100).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchFoodVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchFoodVideos",
    value: function searchFoodVideos(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchFoodVideos");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'type': opts['type'],
        'cuisine': opts['cuisine'],
        'diet': opts['diet'],
        'includeIngredients': opts['includeIngredients'],
        'excludeIngredients': opts['excludeIngredients'],
        'minLength': opts['minLength'],
        'maxLength': opts['maxLength'],
        'offset': opts['offset'],
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/videos/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchGroceryProducts operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Grocery Products
     * Search packaged food products such as frozen pizza and snickers bars.
     * @param {String} query The search query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minCalories The minimum number of calories the product must have.
     * @param {Number} opts.maxCalories The maximum number of calories the product can have.
     * @param {Number} opts.minCarbs The minimum number of carbohydrates in grams the product must have.
     * @param {Number} opts.maxCarbs The maximum number of carbohydrates in grams the product can have.
     * @param {Number} opts.minProtein The minimum number of protein in grams the product must have.
     * @param {Number} opts.maxProtein The maximum number of protein in grams the product can have.
     * @param {Number} opts.minFat The minimum number of fat in grams the product must have.
     * @param {Number} opts.maxFat The maximum number of fat in grams the product can have.
     * @param {Number} opts.offset The offset number for paging (between 0 and 990).
     * @param {Number} opts._number The number of expected results (between 1 and 100).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchGroceryProducts",
    value: function searchGroceryProducts(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchGroceryProducts");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'minCalories': opts['minCalories'],
        'maxCalories': opts['maxCalories'],
        'minCarbs': opts['minCarbs'],
        'maxCarbs': opts['maxCarbs'],
        'minProtein': opts['minProtein'],
        'maxProtein': opts['maxProtein'],
        'minFat': opts['minFat'],
        'maxFat': opts['maxFat'],
        'offset': opts['offset'],
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/products/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchGroceryProductsByUPC operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsByUPCCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Grocery Products by UPC
     * Get information about a food product given its UPC.
     * @param {Number} upc The product's UPC.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchGroceryProductsByUPCCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchGroceryProductsByUPC",
    value: function searchGroceryProductsByUPC(upc, callback) {
      var postBody = null;
      // verify the required parameter 'upc' is set
      if (upc === undefined || upc === null) {
        throw new Error("Missing the required parameter 'upc' when calling searchGroceryProductsByUPC");
      }

      var pathParams = {
        'upc': upc
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/products/upc/{upc}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchMenuItems operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchMenuItemsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Menu Items
     * Search over 115,000 menu items from over 800 fast food and chain restaurants such as McDonalds Big Mac or Starbucks Mocha.
     * @param {String} query The search query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minCalories The minimum number of calories the menu item must have.
     * @param {Number} opts.maxCalories The maximum number of calories the menu item can have.
     * @param {Number} opts.minCarbs The minimum number of carbohydrates in grams the menu item must have.
     * @param {Number} opts.maxCarbs The maximum number of carbohydrates in grams the menu item can have.
     * @param {Number} opts.minProtein The minimum number of protein in grams the menu item must have.
     * @param {Number} opts.maxProtein The maximum number of protein in grams the menu item can have.
     * @param {Number} opts.minFat The minimum number of fat in grams the menu item must have.
     * @param {Number} opts.maxFat The maximum number of fat in grams the menu item can have.
     * @param {Number} opts.offset The offset number for paging (between 0 and 990).
     * @param {Number} opts._number The number of expected results (between 1 and 10).
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchMenuItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchMenuItems",
    value: function searchMenuItems(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchMenuItems");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'minCalories': opts['minCalories'],
        'maxCalories': opts['maxCalories'],
        'minCarbs': opts['minCarbs'],
        'maxCarbs': opts['maxCarbs'],
        'minProtein': opts['minProtein'],
        'maxProtein': opts['maxProtein'],
        'minFat': opts['minFat'],
        'maxFat': opts['maxFat'],
        'offset': opts['offset'],
        'number': opts['_number']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/menuItems/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchRecipes operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Recipes
     * Our recipe API includes over 360,000 recipes as well as an open source recipe database. Consider using the \"Search Recipes Complex\" endpoint for much more flexibility.
     * @param {String} query The (natural language) recipe search query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cuisine The cuisine(s) of the recipes. One or more comma separated. See a full list of supported cuisines.
     * @param {String} opts.diet The diet to which the recipes must be compliant. See a full list of supported diets.
     * @param {String} opts.excludeIngredients An comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
     * @param {String} opts.intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
     * @param {Number} opts.offset The number of results to skip (between 0 and 900).
     * @param {Number} opts._number The number of results to return (between 1 and 100).
     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param {Boolean} opts.instructionsRequired Whether the recipes must have instructions.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchRecipes",
    value: function searchRecipes(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchRecipes");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'cuisine': opts['cuisine'],
        'diet': opts['diet'],
        'excludeIngredients': opts['excludeIngredients'],
        'intolerances': opts['intolerances'],
        'offset': opts['offset'],
        'number': opts['_number'],
        'limitLicense': opts['limitLicense'],
        'instructionsRequired': opts['instructionsRequired']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchRecipesByIngredients operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByIngredientsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Recipes by Ingredients
     * Find recipes that use as many of the given ingredients as possible and have as little as possible missing ingredients. This is a \"what's in your fridge\" API endpoint.
     * @param {String} ingredients A comma-separated list of ingredients that the recipes should contain.
     * @param {Object} opts Optional parameters
     * @param {Number} opts._number The maximal number of recipes to return (between 1 and 100). Defaults to 10.
     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param {Number} opts.ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
     * @param {Boolean} opts.ignorePantry Whether to ignore pantry ingredients such as water, salt, flour etc.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByIngredientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchRecipesByIngredients",
    value: function searchRecipesByIngredients(ingredients, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredients' is set
      if (ingredients === undefined || ingredients === null) {
        throw new Error("Missing the required parameter 'ingredients' when calling searchRecipesByIngredients");
      }

      var pathParams = {};
      var queryParams = {
        'ingredients': ingredients,
        'number': opts['_number'],
        'limitLicense': opts['limitLicense'],
        'ranking': opts['ranking'],
        'ignorePantry': opts['ignorePantry']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/findByIngredients', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchRecipesByNutrients operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByNutrientsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. All the returned recipes will have macro nutrients within the calories, protein, fat, and carbohydrate limits.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.minCarbs The minimum number of carbohydrates in grams the recipe must have.
     * @param {Number} opts.maxCarbs The maximum number of carbohydrates in grams the recipe can have.
     * @param {Number} opts.minProtein The minimum number of protein in grams the recipe must have.
     * @param {Number} opts.maxProtein The maximum number of protein in grams the recipe can have.
     * @param {Number} opts.minCalories The minimum number of calories the recipe must have.
     * @param {Number} opts.maxCalories The maximum number of calories the recipe can have.
     * @param {Number} opts.minFat The minimum number of fat in grams the recipe must have.
     * @param {Number} opts.maxFat The maximum number of fat in grams the recipe can have.
     * @param {Number} opts.minAlcohol The minimum number of alcohol in grams the recipe must have.
     * @param {Number} opts.maxAlcohol The maximum number of alcohol in grams the recipe must have.
     * @param {Number} opts.minCaffeine The minimum number of milligrams of caffeine the recipe must have.
     * @param {Number} opts.maxCaffeine The maximum number of alcohol in grams the recipe must have.
     * @param {Number} opts.minCopper The minimum number of copper in milligrams the recipe must have.
     * @param {Number} opts.maxCopper The maximum number of copper in milligrams the recipe must have.
     * @param {Number} opts.minCalcium The minimum number of calcium in milligrams the recipe must have.
     * @param {Number} opts.maxCalcium The maximum number of calcium in milligrams the recipe must have.
     * @param {Number} opts.minCholine The minimum number of choline in milligrams the recipe must have.
     * @param {Number} opts.maxCholine The maximum number of choline in milligrams the recipe can have.
     * @param {Number} opts.minCholesterol The minimum number of cholesterol in milligrams the recipe must have.
     * @param {Number} opts.maxCholesterol The maximum number of cholesterol in milligrams the recipe must have.
     * @param {Number} opts.minFluoride The minimum number of fluoride in milligrams the recipe must have.
     * @param {Number} opts.maxFluoride The maximum number of fluoride in milligrams the recipe can have.
     * @param {Number} opts.minSaturatedFat The minimum number of saturated fat in grams the recipe must have.
     * @param {Number} opts.maxSaturatedFat The maximum number of saturated fat in grams the recipe must have.
     * @param {Number} opts.minVitaminA The minimum number of Vitamin A in IU the recipe must have.
     * @param {Number} opts.maxVitaminA The maximum number of Vitamin A in IU the recipe must have.
     * @param {Number} opts.minVitaminC The minimum number of Vitamin C milligrams the recipe must have.
     * @param {Number} opts.maxVitaminC The maximum number of Vitamin C in milligrams the recipe can have.
     * @param {Number} opts.minVitaminD The minimum number of Vitamin D in micrograms the recipe must have.
     * @param {Number} opts.maxVitaminD The maximum number of Vitamin D in micrograms the recipe must have.
     * @param {Number} opts.minVitaminE The minimum number of Vitamin E in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminE The maximum number of Vitamin E in milligrams the recipe must have.
     * @param {Number} opts.minVitaminK The minimum number of Vitamin K in micrograms the recipe must have.
     * @param {Number} opts.maxVitaminK The maximum number of Vitamin K in micrograms the recipe must have.
     * @param {Number} opts.minVitaminB1 The minimum number of Vitamin B1 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB1 The maximum number of Vitamin B1 in milligrams the recipe must have.
     * @param {Number} opts.minVitaminB2 The minimum number of Vitamin B2 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB2 The maximum number of Vitamin B2 in milligrams the recipe must have.
     * @param {Number} opts.minVitaminB5 The minimum number of Vitamin B5 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB5 The maximum number of Vitamin B5 in milligrams the recipe can have.
     * @param {Number} opts.minVitaminB3 The minimum number of Vitamin B3 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB3 The maximum number of Vitamin B3 in milligrams the recipe can have.
     * @param {Number} opts.minVitaminB6 The minimum number of Vitamin B6 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB6 The maximum number of Vitamin B6 in milligrams the recipe can have.
     * @param {Number} opts.minVitaminB12 The minimum number of Vitamin B12 in micrograms the recipe must have.
     * @param {Number} opts.maxVitaminB12 The maximum number of Vitamin B12 in micrograms the recipe must have.
     * @param {Number} opts.minFiber The minimum number of fiber in grams the recipe must have.
     * @param {Number} opts.maxFiber The maximum number of fiber in grams the recipe must have.
     * @param {Number} opts.minFolate The minimum number of folate in grams the recipe must have.
     * @param {Number} opts.maxFolate The maximum number of folate in grams the recipe must have.
     * @param {Number} opts.minFolicAcid The minimum number of folic acid in grams the recipe must have.
     * @param {Number} opts.maxFolicAcid The maximum number of folic acid in grams the recipe must have.
     * @param {Number} opts.minIodine The minimum number of Iodine in grams the recipe must have.
     * @param {Number} opts.maxIodine The maximum number of iodine in grams the recipe must have.
     * @param {Number} opts.minIron The minimum number of iron in milligrams the recipe must have.
     * @param {Number} opts.maxIron The maximum number of iron in milligrams the recipe can have.
     * @param {Number} opts.minMagnesium The minimum number of magnesium in milligrams the recipe must have.
     * @param {Number} opts.maxMagnesium The maximum number of magnesium in milligrams the recipe can have.
     * @param {Number} opts.minManganese The minimum number of manganese in milligrams the recipe must have.
     * @param {Number} opts.maxManganese The maximum number of manganese in milligrams the recipe can have.
     * @param {Number} opts.minPhosphorus The minimum number of phosphorus in milligrams the recipe must have.
     * @param {Number} opts.maxPhosphorus The maximum number of phosphorus in milligrams the recipe can have.
     * @param {Number} opts.minPotassium The minimum number of potassium in milligrams the recipe must have.
     * @param {Number} opts.maxPotassium The maximum number of potassium in milligrams the recipe can have.
     * @param {Number} opts.minSelenium The minimum number of selenium in grams the recipe must have.
     * @param {Number} opts.maxSelenium The maximum number of selenium in grams the recipe must have.
     * @param {Number} opts.minSodium The minimum number of sodium in milligrams the recipe must have.
     * @param {Number} opts.maxSodium The maximum number of sodium in milligrams the recipe must have.
     * @param {Number} opts.minSugar The minimum number of sugar in grams the recipe must have.
     * @param {Number} opts.maxSugar The maximum number of sugar in grams the recipe must have.
     * @param {Number} opts.minZinc The minimum number of zinc in milligrams the recipe must have.
     * @param {Number} opts.maxZinc The maximum number of zinc in milligrams the recipe can have.
     * @param {Number} opts.offset The offset number for paging (between 0 and 990).
     * @param {Number} opts._number The number of expected results (between 1 and 100).
     * @param {Boolean} opts.random If true, every request will give you a random set of recipes within the requested limits.
     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesByNutrientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchRecipesByNutrients",
    value: function searchRecipesByNutrients(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'minCarbs': opts['minCarbs'],
        'maxCarbs': opts['maxCarbs'],
        'minProtein': opts['minProtein'],
        'maxProtein': opts['maxProtein'],
        'minCalories': opts['minCalories'],
        'maxCalories': opts['maxCalories'],
        'minFat': opts['minFat'],
        'maxFat': opts['maxFat'],
        'minAlcohol': opts['minAlcohol'],
        'maxAlcohol': opts['maxAlcohol'],
        'minCaffeine': opts['minCaffeine'],
        'maxCaffeine': opts['maxCaffeine'],
        'minCopper': opts['minCopper'],
        'maxCopper': opts['maxCopper'],
        'minCalcium': opts['minCalcium'],
        'maxCalcium': opts['maxCalcium'],
        'minCholine': opts['minCholine'],
        'maxCholine': opts['maxCholine'],
        'minCholesterol': opts['minCholesterol'],
        'maxCholesterol': opts['maxCholesterol'],
        'minFluoride': opts['minFluoride'],
        'maxFluoride': opts['maxFluoride'],
        'minSaturatedFat': opts['minSaturatedFat'],
        'maxSaturatedFat': opts['maxSaturatedFat'],
        'minVitaminA': opts['minVitaminA'],
        'maxVitaminA': opts['maxVitaminA'],
        'minVitaminC': opts['minVitaminC'],
        'maxVitaminC': opts['maxVitaminC'],
        'minVitaminD': opts['minVitaminD'],
        'maxVitaminD': opts['maxVitaminD'],
        'minVitaminE': opts['minVitaminE'],
        'maxVitaminE': opts['maxVitaminE'],
        'minVitaminK': opts['minVitaminK'],
        'maxVitaminK': opts['maxVitaminK'],
        'minVitaminB1': opts['minVitaminB1'],
        'maxVitaminB1': opts['maxVitaminB1'],
        'minVitaminB2': opts['minVitaminB2'],
        'maxVitaminB2': opts['maxVitaminB2'],
        'minVitaminB5': opts['minVitaminB5'],
        'maxVitaminB5': opts['maxVitaminB5'],
        'minVitaminB3': opts['minVitaminB3'],
        'maxVitaminB3': opts['maxVitaminB3'],
        'minVitaminB6': opts['minVitaminB6'],
        'maxVitaminB6': opts['maxVitaminB6'],
        'minVitaminB12': opts['minVitaminB12'],
        'maxVitaminB12': opts['maxVitaminB12'],
        'minFiber': opts['minFiber'],
        'maxFiber': opts['maxFiber'],
        'minFolate': opts['minFolate'],
        'maxFolate': opts['maxFolate'],
        'minFolicAcid': opts['minFolicAcid'],
        'maxFolicAcid': opts['maxFolicAcid'],
        'minIodine': opts['minIodine'],
        'maxIodine': opts['maxIodine'],
        'minIron': opts['minIron'],
        'maxIron': opts['maxIron'],
        'minMagnesium': opts['minMagnesium'],
        'maxMagnesium': opts['maxMagnesium'],
        'minManganese': opts['minManganese'],
        'maxManganese': opts['maxManganese'],
        'minPhosphorus': opts['minPhosphorus'],
        'maxPhosphorus': opts['maxPhosphorus'],
        'minPotassium': opts['minPotassium'],
        'maxPotassium': opts['maxPotassium'],
        'minSelenium': opts['minSelenium'],
        'maxSelenium': opts['maxSelenium'],
        'minSodium': opts['minSodium'],
        'maxSodium': opts['maxSodium'],
        'minSugar': opts['minSugar'],
        'maxSugar': opts['maxSugar'],
        'minZinc': opts['minZinc'],
        'maxZinc': opts['maxZinc'],
        'offset': opts['offset'],
        'number': opts['_number'],
        'random': opts['random'],
        'limitLicense': opts['limitLicense']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/findByNutrients', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchRecipesComplex operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesComplexCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Recipes Complex
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: Since this method combines searching by query, by ingredients, and by nutrients in one endpoint.
     * @param {String} query The (natural language) recipe search query.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cuisine The cuisine(s) of the recipes. One or more comma separated (will be iterpreted as 'OR'). See a full list of supported cuisines.
     * @param {String} opts.excludeCuisine The cuisine(s) the recipes must not match. One or more comma separated (will be iterpreted as 'AND'). See a full list of supported cuisines.
     * @param {String} opts.diet The diet to which the recipes must be compliant. See a full list of supported diets.
     * @param {String} opts.intolerances A comma-separated list of intolerances. All found recipes must not have ingredients that could cause problems for people with one of the given tolerances. See a full list of supported intolerances.
     * @param {String} opts.equipment The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
     * @param {String} opts.includeIngredients A comma-separated list of ingredients that should/must be contained in the recipe.
     * @param {String} opts.excludeIngredients A comma-separated list of ingredients or ingredient types that must not be contained in the recipes.
     * @param {String} opts.type The type of the recipes. See a full list of supported meal types.
     * @param {Boolean} opts.instructionsRequired Whether the recipes must have instructions.
     * @param {Boolean} opts.fillIngredients Add information about the used and missing ingredients in each recipe.
     * @param {Boolean} opts.addRecipeInformation If set to true, you get more information about the recipes returned. This saves the calls to get recipe information.
     * @param {String} opts.author The username of the recipe author.
     * @param {String} opts.tags User defined tags that have to match.
     * @param {String} opts.titleMatch A text that has to match in the title of the recipes.
     * @param {String} opts.sort The strategy to sort recipes by. See a full list of supported sorting options.
     * @param {String} opts.sortDirection The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
     * @param {Number} opts.minCarbs The minimum number of carbohydrates in grams the recipe must have.
     * @param {Number} opts.maxCarbs The maximum number of carbohydrates in grams the recipe can have.
     * @param {Number} opts.minProtein The minimum number of protein in grams the recipe must have.
     * @param {Number} opts.maxProtein The maximum number of protein in grams the recipe can have.
     * @param {Number} opts.minCalories The minimum number of calories the recipe must have.
     * @param {Number} opts.maxCalories The maximum number of calories the recipe can have.
     * @param {Number} opts.minFat The minimum number of fat in grams the recipe must have.
     * @param {Number} opts.maxFat The maximum number of fat in grams the recipe can have.
     * @param {Number} opts.minAlcohol The minimum number of alcohol in grams the recipe must have.
     * @param {Number} opts.maxAlcohol The maximum number of alcohol in grams the recipe must have.
     * @param {Number} opts.minCaffeine The minimum number of milligrams of caffeine the recipe must have.
     * @param {Number} opts.maxCaffeine The maximum number of alcohol in grams the recipe must have.
     * @param {Number} opts.minCopper The minimum number of copper in milligrams the recipe must have.
     * @param {Number} opts.maxCopper The maximum number of copper in milligrams the recipe must have.
     * @param {Number} opts.minCalcium The minimum number of calcium in milligrams the recipe must have.
     * @param {Number} opts.maxCalcium The maximum number of calcium in milligrams the recipe must have.
     * @param {Number} opts.minCholine The minimum number of choline in milligrams the recipe must have.
     * @param {Number} opts.maxCholine The maximum number of choline in milligrams the recipe can have.
     * @param {Number} opts.minCholesterol The minimum number of cholesterol in milligrams the recipe must have.
     * @param {Number} opts.maxCholesterol The maximum number of cholesterol in milligrams the recipe must have.
     * @param {Number} opts.minFluoride The minimum number of fluoride in milligrams the recipe must have.
     * @param {Number} opts.maxFluoride The maximum number of fluoride in milligrams the recipe can have.
     * @param {Number} opts.minSaturatedFat The minimum number of saturated fat in grams the recipe must have.
     * @param {Number} opts.maxSaturatedFat The maximum number of saturated fat in grams the recipe must have.
     * @param {Number} opts.minVitaminA The minimum number of Vitamin A in IU the recipe must have.
     * @param {Number} opts.maxVitaminA The maximum number of Vitamin A in IU the recipe must have.
     * @param {Number} opts.minVitaminC The minimum number of Vitamin C milligrams the recipe must have.
     * @param {Number} opts.maxVitaminC The maximum number of Vitamin C in milligrams the recipe can have.
     * @param {Number} opts.minVitaminD The minimum number of Vitamin D in micrograms the recipe must have.
     * @param {Number} opts.maxVitaminD The maximum number of Vitamin D in micrograms the recipe must have.
     * @param {Number} opts.minVitaminE The minimum number of Vitamin E in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminE The maximum number of Vitamin E in milligrams the recipe must have.
     * @param {Number} opts.minVitaminK The minimum number of Vitamin K in micrograms the recipe must have.
     * @param {Number} opts.maxVitaminK The maximum number of Vitamin K in micrograms the recipe must have.
     * @param {Number} opts.minVitaminB1 The minimum number of Vitamin B1 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB1 The maximum number of Vitamin B1 in milligrams the recipe must have.
     * @param {Number} opts.minVitaminB2 The minimum number of Vitamin B2 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB2 The maximum number of Vitamin B2 in milligrams the recipe must have.
     * @param {Number} opts.minVitaminB5 The minimum number of Vitamin B5 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB5 The maximum number of Vitamin B5 in milligrams the recipe can have.
     * @param {Number} opts.minVitaminB3 The minimum number of Vitamin B3 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB3 The maximum number of Vitamin B3 in milligrams the recipe can have.
     * @param {Number} opts.minVitaminB6 The minimum number of Vitamin B6 in milligrams the recipe must have.
     * @param {Number} opts.maxVitaminB6 The maximum number of Vitamin B6 in milligrams the recipe can have.
     * @param {Number} opts.minVitaminB12 The minimum number of Vitamin B12 in micrograms the recipe must have.
     * @param {Number} opts.maxVitaminB12 The maximum number of Vitamin B12 in micrograms the recipe must have.
     * @param {Number} opts.minFiber The minimum number of fiber in grams the recipe must have.
     * @param {Number} opts.maxFiber The maximum number of fiber in grams the recipe must have.
     * @param {Number} opts.minFolate The minimum number of folate in grams the recipe must have.
     * @param {Number} opts.maxFolate The maximum number of folate in grams the recipe must have.
     * @param {Number} opts.minFolicAcid The minimum number of folic acid in grams the recipe must have.
     * @param {Number} opts.maxFolicAcid The maximum number of folic acid in grams the recipe must have.
     * @param {Number} opts.minIodine The minimum number of Iodine in grams the recipe must have.
     * @param {Number} opts.maxIodine The maximum number of iodine in grams the recipe must have.
     * @param {Number} opts.minIron The minimum number of iron in milligrams the recipe must have.
     * @param {Number} opts.maxIron The maximum number of iron in milligrams the recipe can have.
     * @param {Number} opts.minMagnesium The minimum number of magnesium in milligrams the recipe must have.
     * @param {Number} opts.maxMagnesium The maximum number of magnesium in milligrams the recipe can have.
     * @param {Number} opts.minManganese The minimum number of manganese in milligrams the recipe must have.
     * @param {Number} opts.maxManganese The maximum number of manganese in milligrams the recipe can have.
     * @param {Number} opts.minPhosphorus The minimum number of phosphorus in milligrams the recipe must have.
     * @param {Number} opts.maxPhosphorus The maximum number of phosphorus in milligrams the recipe can have.
     * @param {Number} opts.minPotassium The minimum number of potassium in milligrams the recipe must have.
     * @param {Number} opts.maxPotassium The maximum number of potassium in milligrams the recipe can have.
     * @param {Number} opts.minSelenium The minimum number of selenium in grams the recipe must have.
     * @param {Number} opts.maxSelenium The maximum number of selenium in grams the recipe must have.
     * @param {Number} opts.minSodium The minimum number of sodium in milligrams the recipe must have.
     * @param {Number} opts.maxSodium The maximum number of sodium in milligrams the recipe must have.
     * @param {Number} opts.minSugar The minimum number of sugar in grams the recipe must have.
     * @param {Number} opts.maxSugar The maximum number of sugar in grams the recipe must have.
     * @param {Number} opts.minZinc The minimum number of zinc in milligrams the recipe must have.
     * @param {Number} opts.maxZinc The maximum number of zinc in milligrams the recipe can have.
     * @param {Number} opts.offset The offset number for paging (between 0 and 990).
     * @param {Number} opts._number The number of expected results (between 1 and 10).
     * @param {Boolean} opts.limitLicense Whether the recipes should have an open license that allows for displaying with proper attribution.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchRecipesComplexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchRecipesComplex",
    value: function searchRecipesComplex(query, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchRecipesComplex");
      }

      var pathParams = {};
      var queryParams = {
        'query': query,
        'cuisine': opts['cuisine'],
        'excludeCuisine': opts['excludeCuisine'],
        'diet': opts['diet'],
        'intolerances': opts['intolerances'],
        'equipment': opts['equipment'],
        'includeIngredients': opts['includeIngredients'],
        'excludeIngredients': opts['excludeIngredients'],
        'type': opts['type'],
        'instructionsRequired': opts['instructionsRequired'],
        'fillIngredients': opts['fillIngredients'],
        'addRecipeInformation': opts['addRecipeInformation'],
        'author': opts['author'],
        'tags': opts['tags'],
        'titleMatch': opts['titleMatch'],
        'sort': opts['sort'],
        'sortDirection': opts['sortDirection'],
        'minCarbs': opts['minCarbs'],
        'maxCarbs': opts['maxCarbs'],
        'minProtein': opts['minProtein'],
        'maxProtein': opts['maxProtein'],
        'minCalories': opts['minCalories'],
        'maxCalories': opts['maxCalories'],
        'minFat': opts['minFat'],
        'maxFat': opts['maxFat'],
        'minAlcohol': opts['minAlcohol'],
        'maxAlcohol': opts['maxAlcohol'],
        'minCaffeine': opts['minCaffeine'],
        'maxCaffeine': opts['maxCaffeine'],
        'minCopper': opts['minCopper'],
        'maxCopper': opts['maxCopper'],
        'minCalcium': opts['minCalcium'],
        'maxCalcium': opts['maxCalcium'],
        'minCholine': opts['minCholine'],
        'maxCholine': opts['maxCholine'],
        'minCholesterol': opts['minCholesterol'],
        'maxCholesterol': opts['maxCholesterol'],
        'minFluoride': opts['minFluoride'],
        'maxFluoride': opts['maxFluoride'],
        'minSaturatedFat': opts['minSaturatedFat'],
        'maxSaturatedFat': opts['maxSaturatedFat'],
        'minVitaminA': opts['minVitaminA'],
        'maxVitaminA': opts['maxVitaminA'],
        'minVitaminC': opts['minVitaminC'],
        'maxVitaminC': opts['maxVitaminC'],
        'minVitaminD': opts['minVitaminD'],
        'maxVitaminD': opts['maxVitaminD'],
        'minVitaminE': opts['minVitaminE'],
        'maxVitaminE': opts['maxVitaminE'],
        'minVitaminK': opts['minVitaminK'],
        'maxVitaminK': opts['maxVitaminK'],
        'minVitaminB1': opts['minVitaminB1'],
        'maxVitaminB1': opts['maxVitaminB1'],
        'minVitaminB2': opts['minVitaminB2'],
        'maxVitaminB2': opts['maxVitaminB2'],
        'minVitaminB5': opts['minVitaminB5'],
        'maxVitaminB5': opts['maxVitaminB5'],
        'minVitaminB3': opts['minVitaminB3'],
        'maxVitaminB3': opts['maxVitaminB3'],
        'minVitaminB6': opts['minVitaminB6'],
        'maxVitaminB6': opts['maxVitaminB6'],
        'minVitaminB12': opts['minVitaminB12'],
        'maxVitaminB12': opts['maxVitaminB12'],
        'minFiber': opts['minFiber'],
        'maxFiber': opts['maxFiber'],
        'minFolate': opts['minFolate'],
        'maxFolate': opts['maxFolate'],
        'minFolicAcid': opts['minFolicAcid'],
        'maxFolicAcid': opts['maxFolicAcid'],
        'minIodine': opts['minIodine'],
        'maxIodine': opts['maxIodine'],
        'minIron': opts['minIron'],
        'maxIron': opts['maxIron'],
        'minMagnesium': opts['minMagnesium'],
        'maxMagnesium': opts['maxMagnesium'],
        'minManganese': opts['minManganese'],
        'maxManganese': opts['maxManganese'],
        'minPhosphorus': opts['minPhosphorus'],
        'maxPhosphorus': opts['maxPhosphorus'],
        'minPotassium': opts['minPotassium'],
        'maxPotassium': opts['maxPotassium'],
        'minSelenium': opts['minSelenium'],
        'maxSelenium': opts['maxSelenium'],
        'minSodium': opts['minSodium'],
        'maxSodium': opts['maxSodium'],
        'minSugar': opts['minSugar'],
        'maxSugar': opts['maxSugar'],
        'minZinc': opts['minZinc'],
        'maxZinc': opts['maxZinc'],
        'offset': opts['offset'],
        'number': opts['_number'],
        'limitLicense': opts['limitLicense']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/complexSearch', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the searchSiteContent operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~searchSiteContentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Site Content
     * Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggests on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     * @param {String} query The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~searchSiteContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "searchSiteContent",
    value: function searchSiteContent(query, callback) {
      var postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchSiteContent");
      }

      var pathParams = {};
      var queryParams = {
        'query': query
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/site/search', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the summarizeRecipe operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~summarizeRecipeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarize Recipe
     * Summarize the recipe in a short text.
     * @param {Number} id The recipe id.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~summarizeRecipeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "summarizeRecipe",
    value: function summarizeRecipe(id, callback) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling summarizeRecipe");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/recipes/{id}/summary', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the talkToChatbot operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~talkToChatbotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Talk to Chatbot
     * This endpoint can be used to have a conversation about food with the spoonacular chat bot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
     * @param {String} text The request / question / answer from the user to the chat bot.
     * @param {Object} opts Optional parameters
     * @param {String} opts.contextId An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~talkToChatbotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */

  }, {
    key: "talkToChatbot",
    value: function talkToChatbot(text, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling talkToChatbot");
      }

      var pathParams = {};
      var queryParams = {
        'text': text,
        'contextId': opts['contextId']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/food/converse', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeEquipment operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeEquipmentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Equipment
     * Visualize the equipment used to make a recipe.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings.
     * @param {Object} opts Optional parameters
     * @param {String} opts.view Either \\\"grid\\\" or \\\"list\\\" as visualization of the equipment.
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeEquipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeEquipment",
    value: function visualizeEquipment(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling visualizeEquipment");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling visualizeEquipment");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'view': opts['view'],
        'defaultCss': opts['defaultCss'],
        'showBacklink': opts['showBacklink']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizeEquipment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeIngredients operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeIngredientsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Ingredients
     * Visualize ingredients of a recipe.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings.
     * @param {Object} opts Optional parameters
     * @param {String} opts.measure The initial measure, either \\\"metric\\\" or \\\"us\\\".
     * @param {String} opts.view Either \\\"grid\\\" or \\\"list\\\" as visualization of the equipment.
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeIngredientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeIngredients",
    value: function visualizeIngredients(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling visualizeIngredients");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling visualizeIngredients");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'measure': opts['measure'],
        'view': opts['view'],
        'defaultCss': opts['defaultCss'],
        'showBacklink': opts['showBacklink']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizeIngredients', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeMenuItemNutritionByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeMenuItemNutritionByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Menu Item Nutrition by ID
     * Visualize a menu items' nutrition data.
     * @param {Number} id The menu item id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeMenuItemNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeMenuItemNutritionByID",
    value: function visualizeMenuItemNutritionByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeMenuItemNutritionByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/food/menuItems/{id}/nutritionWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizePriceBreakdown operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizePriceBreakdownCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Price Breakdown
     * Visualize the price breakdown of a recipe.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.mode The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizePriceBreakdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizePriceBreakdown",
    value: function visualizePriceBreakdown(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling visualizePriceBreakdown");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling visualizePriceBreakdown");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'mode': opts['mode'],
        'defaultCss': opts['defaultCss'],
        'showBacklink': opts['showBacklink']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizePriceEstimator', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeProductNutritionByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeProductNutritionByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Product Nutrition by ID
     * Visualize a grocery product's nutritional information.
     * @param {Number} id The id of the product.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeProductNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeProductNutritionByID",
    value: function visualizeProductNutritionByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeProductNutritionByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/food/products/{id}/nutritionWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeEquipmentByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeEquipmentByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Recipe Equipment by ID
     * Visualize a recipe's equipment list.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeEquipmentByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeRecipeEquipmentByID",
    value: function visualizeRecipeEquipmentByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipeEquipmentByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/equipmentWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeIngredientsByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeIngredientsByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Recipe Ingredients by ID
     * Visualize a recipe's ingredient list.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeIngredientsByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeRecipeIngredientsByID",
    value: function visualizeRecipeIngredientsByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipeIngredientsByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/ingredientWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeNutrition operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Recipe Nutrition
     * Visualize a recipe's nutrition data.
     * @param {String} ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param {Number} servings The number of servings.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {Boolean} opts.showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeRecipeNutrition",
    value: function visualizeRecipeNutrition(ingredientList, servings, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'ingredientList' is set
      if (ingredientList === undefined || ingredientList === null) {
        throw new Error("Missing the required parameter 'ingredientList' when calling visualizeRecipeNutrition");
      }
      // verify the required parameter 'servings' is set
      if (servings === undefined || servings === null) {
        throw new Error("Missing the required parameter 'servings' when calling visualizeRecipeNutrition");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'ingredientList': ingredientList,
        'servings': servings,
        'defaultCss': opts['defaultCss'],
        'showBacklink': opts['showBacklink']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/visualizeNutrition', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipeNutritionByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Recipe Nutrition by ID
     * Visualize a recipe's nutritional information.
     * @param {Number} id The id of the product.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipeNutritionByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeRecipeNutritionByID",
    value: function visualizeRecipeNutritionByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipeNutritionByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/nutritionWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the visualizeRecipePriceBreakdownByID operation.
     * @callback module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipePriceBreakdownByIDCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Recipe Price Breakdown by ID
     * Visualize a recipe's price breakdown.
     * @param {Number} id The recipe id.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.defaultCss Whether the default CSS should be added to the response.
     * @param {module:com.spoonacular.client/com.spoonacular/DefaultApi~visualizeRecipePriceBreakdownByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */

  }, {
    key: "visualizeRecipePriceBreakdownByID",
    value: function visualizeRecipePriceBreakdownByID(id, opts, callback) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling visualizeRecipePriceBreakdownByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'defaultCss': opts['defaultCss']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = 'String';
      return this.apiClient.callApi('/recipes/{id}/priceBreakdownWidget', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);

  return DefaultApi;
}();

exports.default = DefaultApi;